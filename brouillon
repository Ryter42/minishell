
int	num_separator(char *str, char *quote)
{
	int	i;
	int	res;

	i = 0;
	res = 0;
	while (str[i])
	{
		if (is_separator(str[i]) == 1 && quote[i] == '0')
			res++;
		i++;
	}
	return (res);
}

void	add_space(char *str, char c, int i)
{
	str[i] = ' ';
	i++;
	str[i] = c;
	i++;
	str[i] = ' ';
}

char	*space_separator(char *str, char *quote)
{
	char	*res;
	int		i;
	int		j;

	j = 0;
	i = 0;
	res = malloc(sizeof(ft_strlen(str) + (num_separator(str, quote) * 2) + 1));
	while (str[i])
	{
		if (is_separator(str[i]) == 1)
		{
			add_space(res, str[i], j);
			j = j + 3;
			i++;
		}
		else
		{
			res[j] = str[i];
			i++;
			j++;
		}
	}
	res[j] = 0;
	free(str);
	return (res);
}

t_lexer create_lst(t_data *data)
{
	t_lexer *lexer

}

int	is_quote(char c)
{
	if (c == '\'' || c == '"')
		return (1);
	else
		return (0);
}

int	quote(char *str)
{
	if (veriquote(str) == 0)
		return (0);
	return (1);
}

int	pars_redir(t_data *data, int i)
{
	if (data->str[i + 1] == '|' || (data->str[i + 2] == '|' && data->str[i + 1] != '\\' ))
		return (0);
	else
		return (1);
}


int	has_word(t_data *data, int	i, int dir)
{
	i = i + dir;
	while (data->str[i])
	{
		if (is_separator(data->str[i]) == 0)
			return (1);
		i = i + dir;
	}
	return (0);
}

int	pars_pipe(t_data *data, int	i)
{
	if (has_word(data, i, 1) == 0 || has_word(data, i, -1) == 0)
		return (0);
	else
		return (1);
}

char *start(void)
{
	char *str;

	str = malloc (sizeof(char) * 5);
}

int	numchar(char *str, char c)
{
	int	i;
	int	res;

	res = 0;
	i = 0;
	while (str[i])
	{
		if (str[i] == c)
			res++;
		i++;
	}
	return (res);
}

int	pars_separator(t_data *data)
{
	int	i;

	i = 0;
	while (data->str[i])
	{
		if ((data->str[i] == '<' && data->quote[i] == '0')
			|| (data->str[i] == '>' && data->quote[i] == '0'))
			if (pars_redir(data, i) == 0)
				return (0);
		if (data->str[i] == '|' && data->quote[i] == '0')
			if(pars_pipe(data, i) == 0)
				return (0);
		i++;
	}
	return (1);
}

int	open_outfile(t_cmd *cmd)
{
	int	fd;

	if (cmd->outfile)
	{
		if (cmd->add_out)
			fd = open(cmd->outfile, O_WRONLY | O_CREAT | O_APPEND, 0644);
		else
		{
			dprintf(2, "outfile que oceane m'a demander d'afficher == %s\n\n", cmd->outfile);
			fd = open(cmd->outfile, O_WRONLY | O_TRUNC | O_CREAT, 0777);
			fd = open(cmd->outfile, O_WRONLY | O_TRUNC | O_CREAT, 0777);
			dprintf(2, "fd out == %d\n\n", fd);
		}
		close(cmd->data->fd[1]);
	}
	else if (cmd->next)
	{
		fd = cmd->data->fd[1];
	}
	else
	{
		close(cmd->data->fd[1]);
		return (0);
	}
	if (fd == -1)
	{
		close(cmd->data->fd[0]);
		close(cmd->data->fd[1]);
		perror(cmd->outfile);
		exit(EXIT_FAILURE);
	}
	return (fd);
}